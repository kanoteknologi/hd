package hd_test

import (
	"io/ioutil"
	"net/http"
	"os"
	"path/filepath"
	"testing"

	"git.kanosolution.net/kano/kaos"
	"github.com/kanoteknologi/hd"
	"github.com/sebarcode/codekit"
	"github.com/smartystreets/goconvey/convey"
)

func TestSwaggerV1(t *testing.T) {
	cwd, _ := os.Getwd()
	fileLoc := filepath.Join(cwd, "swagger_test.go")
	s := PrepareServer()

	mux := http.NewServeMux()
	dep := hd.NewHttpDeployer(nil)
	dep.Deploy(s, mux)

	convey.Convey("swagger", t, func() {
		convey.Convey("reading file from "+fileLoc, func() {
			spec, err := dep.GenerateSwaggerSpec(s, fileLoc, "", "localhost:36900", "http,https")
			convey.So(err, convey.ShouldBeNil)
			ioutil.WriteFile(filepath.Join(cwd, "swagger.json"), []byte(codekit.JsonStringIndent(spec, "\t")), 0644)
		})
	})
}

/*
@swagger 2.0
@title swgen2
*/
// @description Swagger document generated by hd
// @version 1.0.0

// @model SPerson person object
type SPerson struct {
	ID   int    `json:"_id"`
	Name string `json:"name"`
}

// @model SAddress Address of a person
type SAddress struct {
	ID          int
	PersonID    int
	AddressType string
	Address     string
}

type LogicObj struct {
}

// @route /obj/SavePerson save a person into database
func (o *LogicObj) SavePerson(ctx *kaos.Context, p *SPerson) (*SPerson, error) {
	return nil, nil
}

func (o *LogicObj) DeletePerson(ctx *kaos.Context, p *SPerson) (*SPerson, error) {
	return nil, nil
}

/*
func (o *LogicObj) SaveAddress(ctx *kaos.Context, a *SAddress) (*SAddress, error) {
	return nil, nil
}
*/

func PrepareServer() *kaos.Service {
	s := kaos.NewService()
	s.RegisterModel(new(LogicObj), "obj").SetDeployer(hd.DeployerName)
	s.RegisterRoute(ogFn, "classic")
	return s
}

// @route /nk/classic non kaos function
func ogFn(ctx *kaos.Context, id string) (string, error) {
	return "OK", nil
}

// @route /nk/api1 non kaos web-api
// @method /nk/api1 get
// @param /nk/api1 id string query id of data
// @response /nk/api1 200 Success
// @response-type /nk/api1 ref SPerson
